/*
========================================================================================
Single cell processing pipeline using cellranger, velocyto and scanpy
========================================================================================
 A: Thomas Walzthoeni, 2020
 D: Processing of sc RNA-Seq data generated by the protocols from 10x Genomics
 D: Pipeline was created with Dolphin Next (https://dolphinnext.readthedocs.io/en/latest/)
----------------------------------------------------------------------------------------
*/

if (!params.velocytocpus){params.velocytocpus = ""} 
if (!params.samplesheet){params.samplesheet = ""} 
if (!params.localcores){params.localcores = ""} 
if (!params.localmemGB){params.localmemGB = ""} 
if (!params.samtools_thr){params.samtools_thr = ""} 
if (!params.condaenvpath){params.condaenvpath = ""} 

Channel.value(params.velocytocpus).set{g_10_ncpus_g_43}
Channel.value(params.samplesheet).set{g_15_param_g_33}
Channel.value(params.localcores).set{g_35_localcores_g_39}
Channel.value(params.localmemGB).set{g_36_localmemGB_g_39}
Channel.value(params.samtools_thr).set{g_37_ncpus_g_39}
Channel.value(params.condaenvpath).into{g_40_param_g_39;g_40_param_g_41;g_40_param_g_43}

process split_tsv_cr_local {

input:
 val input from g_15_param_g_33

output:
 val list  into g_33_param_g_39 mode flatten

script:

list = []
count = 0
file(input).eachLine {  str ->
        
    if(str.length() > 0) {
        
        if(count==0){
            header = str.split('\t')
        }else{
            
        //Create and add a map    
        sampleidx = header.findIndexValues {it == 'Sample'}
        ncidx = header.findIndexValues {it == 'ncells'}
        fqpathidx = header.findIndexValues {it == 'fastqpath'}
        ipathidx = header.findIndexValues {it == 'refindex'}
        gtfidx = header.findIndexValues {it == 'refgtf'}
        chemidx = header.findIndexValues {it == 'chemistry'}


        
        linesplit = str.split('\t')
        
        //println linesplit[sgindex]
        samplenamevalue = linesplit[sampleidx].join()
        fqpathvalue = linesplit[fqpathidx].join()
        ipathvalue = linesplit[ipathidx].join()
        chemvalue = linesplit[chemidx].join()
        ncvalue = linesplit[ncidx].join()
        gtfvalue = linesplit[gtfidx].join()
        //println samplevalue
        //println fastqpathvalue
        //println refindexvalue

        list << [gtf:"${gtfvalue}",chemistry:"${chemvalue}",ncells:"${ncvalue}",samplename:"${samplenamevalue}",fastqpath:"${fqpathvalue}", indexpath:"${ipathvalue}"]
          
        }
        count++
        
       //println "line ${count++}: $str"
       
    }
}

//println list

"""
"""
}


process cellranger_count_localcores {

publishDir params.outdir, overwrite: true, mode: 'copy',
	saveAs: {filename ->
	if (filename =~ /${params.samplename}$/) "cellranger/$filename"
}

input:
 val params from g_33_param_g_39
 val localcores from g_35_localcores_g_39
 val localmemGB from g_36_localmemGB_g_39
 val samtoolsncpus from g_37_ncpus_g_39
 val condaenvpath from g_40_param_g_39

output:
 file "${params.samplename}"  into g_39_folder_g_41, g_39_folder_g_43

conda "${condaenvpath}"
script:
"""
# Process developed for cellranger 3
# see https://www.kallistobus.tools/velocity_tutorial.html
# Fields in params:
# samplename
# fastqpath
# indexpath
# chemistry
# ncells
# gtf

# Get cellranger version
cellranger sitecheck > sitecheck.txt
crversion=`head -n2 sitecheck.txt | grep -oP '\\(\\K[^)]+'`

# Standard cr command
cr_cmd="cellranger count --id=cellranger --fastqs=${params['fastqpath']} \
--sample=${params['samplename']} \
--transcriptome=${params['indexpath']} \
--expect-cells=${params['ncells']} \
--localcores=${localcores} --localmem=${localmemGB} \
--chemistry=${params['chemistry']}"

# Echo the cmd to a file
echo \${cr_cmd} > cr_cmd.txt

# Execute
eval \${cr_cmd}

# Create output directories
mkdir -p ${params['samplename']}/count_matrices
mkdir -p ${params['samplename']}/bamfile
mkdir -p ${params['samplename']}/statsfiles
mkdir -p ${params['samplename']}/crlog

# Copy count matrices folders and h5 files from cellranger directory
# In v.3.0.2 there is no genome folder anymore in the raw_feature_bc_matrix.h5 (for single genome alignments)
cp -R cellranger/outs/filtered_feature_bc_matrix ${params['samplename']}/count_matrices
cp -R cellranger/outs/raw_feature_bc_matrix ${params['samplename']}/count_matrices
cp cellranger/outs/filtered_feature_bc_matrix.h5 ${params['samplename']}/count_matrices
cp cellranger/outs/raw_feature_bc_matrix.h5 ${params['samplename']}/count_matrices
# Unzip recursive all gz files (in cr version 3.0.2 files are gzipped)
gunzip -r ${params['samplename']}/count_matrices

# Copy bamfile
cp cellranger/outs/possorted_genome_bam.bam ${params['samplename']}/bamfile
cp cellranger/outs/possorted_genome_bam.bam.bai ${params['samplename']}/bamfile

# Copy statsfiles
cp cellranger/outs/web_summary.html ${params['samplename']}/statsfiles
cp cellranger/outs/metrics_summary.csv ${params['samplename']}/statsfiles

# Copy analysis folder
cp -R cellranger/outs/analysis ${params['samplename']}

# Copy molecule_info.h5 file
cp cellranger/outs/molecule_info.h5 ${params['samplename']}/analysis

# Try to copy cloupe.cloupe file to analysis folder / is not created if mult genomes are used / do not err if file does not exist
cp cellranger/outs/cloupe.cloupe ${params['samplename']}/analysis/${params['samplename']}.cloupe 2>/dev/null || :

# Copy the logfiles _*
cp cellranger/_* ${params['samplename']}/crlog

# Echo the version to a file
echo \${crversion} > ${params['samplename']}/cr_version.txt
# Cp sitecheck file
cp sitecheck.txt ${params['samplename']}/cr_sitecheck.txt
# Copy the cmd to results directory
cp cr_cmd.txt ${params['samplename']}/cr_cmd.txt

# Get samtools version
samtools --help | head -3 > ${params['samplename']}/samtools_version.txt

# Sort bamfile by CB tag / for velocyto
samt_cmd="samtools sort --threads ${samtoolsncpus} -t CB -O BAM -o ${params['samplename']}/bamfile/cellsorted_possorted_genome_bam.bam ${params['samplename']}/bamfile/possorted_genome_bam.bam"

# Execute
eval \${samt_cmd}

# Echo cmd to file
echo \${samt_cmd} > ${params['samplename']}/samtools_cmd.txt

# Write analysis params to a params.txt file
echo "samplename: ${params['samplename']}" > ${params['samplename']}/params.txt
echo "fastqpath: ${params['fastqpath']}" >> ${params['samplename']}/params.txt
echo "indexpath: ${params['indexpath']}" >> ${params['samplename']}/params.txt
echo "chemistry: ${params['chemistry']}" >> ${params['samplename']}/params.txt
echo "ncells: ${params['ncells']}" >> ${params['samplename']}/params.txt
echo "gtf: ${params['gtf']}" >> ${params['samplename']}/params.txt

# rm cellranger folder
rm -R cellranger
"""
}


process Velocyto_folder_localrun {

publishDir params.outdir, overwrite: true, mode: 'copy',
	saveAs: {filename ->
	if (filename =~ /${name}$/) "velocyto/$filename"
}

input:
 file name from g_39_folder_g_43
 val ncpus from g_10_ncpus_g_43
 val condaenvpath from g_40_param_g_43

output:
 file "${name}"  into g_43_folder

conda "${condaenvpath}"
script:
"""
# Read the paramsfile and split to get gft file

# Fields in params:
# samplename
# fastqpath
# indexpath
# readlength
# fracreads
# subsample:samplename_rlvaluebp_fracvaluefrac
# chemistry
# ncells
# gtf


# see locale-a and https://click.palletsprojects.com/en/7.x/python3/
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Get version
velocyto --version > version.txt
vcversion=`egrep -o "([0-9]{1,}\\.)+[0-9]{1,}" version.txt`

# Get the gtf file from params.txt
gtffile=\$(grep "gtf: " ${name}/params.txt)
gtffile=\${gtffile/gtf: /}

# run velocyto for each genome subdirectory
# Note: since cr v 3.0.2 there are no genome dirs for single genome alignments anymore
subdircount=`find ${name}/count_matrices/filtered_feature_bc_matrix/ -maxdepth 1 -type d | wc -l`

# Check if there are subdirectories
if [ \$subdircount -eq 1 ]
then
# no subdirs
# Create barcode file path
bcpath="${name}/count_matrices/filtered_feature_bc_matrix/barcodes.tsv"

# velocyto cmd
velocmd="velocyto run --samtools-threads ${ncpus} -b \${bcpath} -o velocyto ${name}/bamfile/possorted_genome_bam.bam \${gtffile}"

# create results dir
mkdir "velocyto"

# Echo cmd to file
echo \${velocmd} > "velocyto/vc.cmd.txt"

# Execute
eval \${velocmd}

else

# With subdirs

# Generate an array of subdirs in folder
dirarray=( `ls ${name}/count_matrices/filtered_feature_bc_matrix/` )

# Iterate over the folders
for dname in "\${dirarray[@]}"
do

# Create barcode file path
bcpath="${name}/count_matrices/filtered_feature_bc_matrix/\${dname}/barcodes.tsv"

# velocyto cmd
velocmd="velocyto run --samtools-threads ${ncpus} -b \${bcpath} -o velocyto/\${dname} ${name}/bamfile/possorted_genome_bam.bam \${gtffile}}"

# create results dir
mkdir -p "velocyto/\${dname}"

# Echo cmd to file
echo \${velocmd} > "velocyto/\${dname}/vc.cmd.txt"

# Execute
eval \${velocmd}

done
    
fi

# mv the original folder (which is a softlink)
mv ${name} oldname

# mv velocyto folder to name
mv velocyto ${name}

# cp velocyto version file
cp version.txt ${name}/vc_version.txt
"""
}


process Create_AnnData {

publishDir params.outdir, overwrite: true, mode: 'copy',
	saveAs: {filename ->
	if (filename =~ /${name}$/) "scanpy_AnnData/$filename"
}

input:
 file name from g_39_folder_g_41
 val condaenvpath from g_40_param_g_41

output:
 file "${name}"  into g_41_folder

conda "${condaenvpath}"
script:
"""
#!/usr/bin/env python
# Adapted from https://nbviewer.jupyter.org/github/theislab/scanpy_usage/blob/master/170505_seurat/seurat.ipynb

import numpy as np
import pandas as pd
import scanpy.api as sc
import glob
import os
import sys

# rename directory
os.rename('${name}',"cellranger")

# Create dir
os.mkdir('${name}')

# Create annData for filtered results
# Glob genome folders # Note no subdirs are used in cr 3.0.2 for single genome alignments
pathg =glob.glob('./cellranger/count_matrices/filtered_feature_bc_matrix/*')

# Function to count subdirs
# https://stackoverflow.com/questions/19747408
def fcount(path, map = {}):
  count = 0
  for f in os.listdir(path):
    child = os.path.join(path, f)
    if os.path.isdir(child):
      child_count = fcount(child, map)
      count += child_count + 1 # unless include self
  map[path] = count
  return count

# In cr version 3.0.2 no genome folder is used anymore for single genome alignments
if fcount('./cellranger/count_matrices/filtered_feature_bc_matrix') == 0:
    adata = sc.read('./cellranger/count_matrices/filtered_feature_bc_matrix/matrix.mtx', cache=True).T  # transpose the data
    adata.var_names = pd.read_csv('./cellranger/count_matrices/filtered_feature_bc_matrix/features.tsv', header=None, sep='\t')[1]
    adata.obs_names = pd.read_csv('./cellranger/count_matrices/filtered_feature_bc_matrix/barcodes.tsv', header=None)[0]
    adata.var_names_make_unique()

    # Write to file
    results_file = './${name}/filtered_feature_bc_matrix.h5ad'
    adata.write(results_file)

    # Create annData for full results
    adata = sc.read('./cellranger/count_matrices/raw_feature_bc_matrix/matrix.mtx', cache=True).T  # transpose the data
    adata.var_names = pd.read_csv('./cellranger/count_matrices/raw_feature_bc_matrix/features.tsv', header=None, sep='\t')[1]
    adata.obs_names = pd.read_csv('./cellranger/count_matrices/raw_feature_bc_matrix/barcodes.tsv', header=None)[0]
    adata.var_names_make_unique()

    # Write to file
    results_file = './${name}/raw_feature_bc_matrix.h5ad'
    adata.write(results_file) 
else:
    # Iterate over the genome folder
    for x in pathg:
    # Get the basename
        genomeFname=os.path.basename(x)

        adata = sc.read('./cellranger/count_matrices/filtered_feature_bc_matrix/' + genomeFname + '/matrix.mtx', cache=True).T  # transpose the data
        adata.var_names = pd.read_csv('./cellranger/count_matrices/filtered_feature_bc_matrix/' + genomeFname + '/features.tsv', header=None, sep='\t')[1]
        adata.obs_names = pd.read_csv('./cellranger/count_matrices/filtered_feature_bc_matrix/' + genomeFname + '/barcodes.tsv', header=None)[0]
        adata.var_names_make_unique()

        # Write to file
        results_file = './${name}/' + genomeFname + '/filtered_feature_bc_matrix.h5ad'
        adata.write(results_file)

        # Create annData for full results
        # pathg =glob.glob('./cellranger/count_matrices/raw_gene_bc_matrices/*/')
        # path=str(pathg[0])

        adata = sc.read('./cellranger/count_matrices/raw_feature_bc_matrix/' + genomeFname + '/matrix.mtx', cache=True).T  # transpose the data
        adata.var_names = pd.read_csv('./cellranger/count_matrices/raw_feature_bc_matrix/' + genomeFname + '/features.tsv', header=None, sep='\t')[1]
        adata.obs_names = pd.read_csv('./cellranger/count_matrices/raw_feature_bc_matrix/' + genomeFname + '/barcodes.tsv', header=None)[0]
        adata.var_names_make_unique()

        # Write to file
        results_file = './${name}/' + genomeFname + '/raw_feature_bc_matrix.h5ad'
        adata.write(results_file)

# Write version of sc to file
sc.settings.logfile = './${name}/scanpy_version.txt'
sc.logging.print_versions()
"""

}


workflow.onComplete {
println "##Pipeline execution summary##"
println "---------------------------"
println "##Completed at: $workflow.complete"
println "##Duration: ${workflow.duration}"
println "##Success: ${workflow.success ? 'OK' : 'failed' }"
println "##Exit status: ${workflow.exitStatus}"
}
